name: Python Selenium Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write  # para commitear docs/

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Google Chrome
      run: |
        sudo apt-get update
        sudo apt-get install -y wget gpg
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo gpg --dearmor -o /usr/share/keyrings/google-linux-signing-keyring.gpg
        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/google-linux-signing-keyring.gpg] https://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        google-chrome --version

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        python - <<'PY'
        import selenium, sys
        print('Selenium', selenium.__version__)
        print(sys.version)
        PY

    - name: Set up Java (for Allure)
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: '17'

    # --- Ejecutar tests y guardar exit code ---
    - name: Run tests
      env:
        CI: "true"
      run: |
        set -o pipefail
        pytest tests/test_pom_logins.py -v --alluredir=results
        echo $? > .pytest_exitcode
      # no usamos continue-on-error: true para no ocultar el fallo;
      # guardamos el código y fallamos al final

    # Subir siempre los resultados crudos, aunque fallen tests
    - name: Upload Allure results (artifact)
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: allure-results
        path: results
        if-no-files-found: warn

    # ---- Generar Allure estático SIEMPRE ----
    - name: Set up Node (for Allure CLI)
      if: always()
      uses: actions/setup-node@v4
      with:
        node-version: "20"

    - name: Install Allure Commandline
      if: always()
      run: npm i -g allure-commandline

    - name: Generate Allure report
      if: always()
      run: |
        if [ -d results ] && [ "$(ls -A results || true)" ]; then
          allure generate results -o reports --clean
        else
          echo "No hay resultados de Allure; creando placeholder."
          mkdir -p reports
          cat > reports/index.html <<'HTML'
          <!doctype html><meta charset="utf-8">
          <title>Allure Report</title>
          <h1>No se generaron resultados de Allure</h1>
          <p>Revisa el paso de pytest: pudo fallar antes de crear <code>results/</code>.</p>
          HTML
        fi
        test -f reports/index.html

    # Publicar SIEMPRE en Pages (main/docs)
    - name: Prepare docs/
      if: always()
      run: |
        rm -rf docs
        mkdir -p docs
        cp -R reports/* docs/
        touch docs/.nojekyll

    - name: Commit docs/ to main
      if: always()
      uses: stefanzweifel/git-auto-commit-action@v5
      with:
        commit_message: "chore: publish Allure report to docs/"
        branch: main
        file_pattern: docs/**

    # --- Fallar el job si los tests fallaron ---
    - name: Fail job if tests failed
      if: always()
      run: |
        code=$(cat .pytest_exitcode 2>/dev/null || echo 0)
        echo "pytest exit code: $code"
        exit $code
